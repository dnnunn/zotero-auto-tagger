"use strict";

if (typeof Zotero !== 'undefined') {
  Zotero.debug("Auto-Tagger: index.js loaded");
}

(() => {
  try {
    // Import the tag generator module
    const { TagGenerator } = ChromeUtils.import(
      "chrome://zotero-auto-tagger/content/modules/tagGenerator.js"
    );
    
    // Configuration
    const config = {
      addonName: "Zotero Auto-Tagger",
      addonID: "zotero-auto-tagger@dnnunn.github.io",
      addonRef: "autotagger",
      addonInstance: "AutoTagger"
    };

    // Simple string helper
    function getString(key) {
      const strings = {
        "menu.autoTag": "Auto-Tag Items",
        "menu.autoTagSelected": "Auto-Tag Selected Items",
        "autoTag.title": "Auto-Tagger",
        "autoTag.noItems": "No items selected",
        "autoTag.complete": "Tagged ${count} items",
        "autoTag.error": "Error tagging items: ${error}",
        "autoTag.processing": "Processing ${current} of ${total} items..."
      };
      return strings[key] || key;
    }

    // Register menu items
    function registerMenus() {
      Zotero.debug("Auto-Tagger: Registering menus");
      const doc = Zotero.getMainWindow().document;
      
      // Tools menu
      const toolsMenu = doc.getElementById("menu_ToolsPopup");
      if (toolsMenu) {
        const menuitem = doc.createXULElement("menuitem");
        menuitem.id = `${config.addonRef}-tools-menu`;
        menuitem.setAttribute("label", getString("menu.autoTag"));
        menuitem.setAttribute("oncommand", "Zotero.AutoTagger.tagSelectedItems();");
        toolsMenu.appendChild(menuitem);
        Zotero.debug("Auto-Tagger: Added to Tools menu");
      } else {
        Zotero.debug("Auto-Tagger: Tools menu not found");
      }
      
      // Item context menu
      const itemMenu = doc.getElementById("zotero-itemmenu");
      if (itemMenu) {
        const menuitem = doc.createXULElement("menuitem");
        menuitem.id = `${config.addonRef}-item-menu`;
        menuitem.setAttribute("label", getString("menu.autoTagSelected"));
        menuitem.setAttribute("oncommand", "Zotero.AutoTagger.tagSelectedItems();");
        itemMenu.appendChild(menuitem);
        Zotero.debug("Auto-Tagger: Added to item context menu");
      } else {
        Zotero.debug("Auto-Tagger: Item menu not found");
      }
    }

    // Main class
    class AutoTagger {
      constructor() {
        this.initialized = false;
        this.tagGenerator = null;
        Zotero.debug("Auto-Tagger: AutoTagger instance created");
      }

      async init() {
        if (this.initialized) return;
        
        Zotero.debug("Auto-Tagger: Initializing");
        
        // Initialize tag generator
        this.tagGenerator = new TagGenerator();
        
        // Register UI
        registerMenus();
        
        this.initialized = true;
        Zotero.debug("Auto-Tagger: Initialization complete");
      }

      async tagSelectedItems() {
        try {
          const items = Zotero.getActiveZoteroPane().getSelectedItems();
          if (!items || items.length === 0) {
            alert(getString("autoTag.noItems"));
            return;
          }
          
          // Filter to regular items only
          const regularItems = items.filter(item => item.isRegularItem());
          if (regularItems.length === 0) {
            alert("No regular items selected");
            return;
          }
          
          Zotero.debug(`Auto-Tagger: Processing ${regularItems.length} items`);
          
          let tagged = 0;
          let errors = 0;
          
          // Process each item
          for (let i = 0; i < regularItems.length; i++) {
            const item = regularItems[i];
            const progress = getString("autoTag.processing")
              .replace("${current}", i + 1)
              .replace("${total}", regularItems.length);
            
            Zotero.debug(`Auto-Tagger: ${progress}`);
            
            try {
              // Use the tag generator to process the item
              const success = await this.tagGenerator.processItem(item);
              if (success) {
                tagged++;
              } else {
                errors++;
                Zotero.debug(`Auto-Tagger: Failed to tag item ${item.id}`);
              }
            } catch (e) {
              errors++;
              Zotero.logError(e);
              Zotero.debug(`Auto-Tagger: Error processing item ${item.id}: ${e.message}`);
            }
          }
          
          // Report results
          let message = getString("autoTag.complete").replace("${count}", tagged);
          if (errors > 0) {
            message += `\n${errors} items failed to process.`;
          }
          alert(message);
          
        } catch (e) {
          Zotero.logError(e);
          alert(getString("autoTag.error").replace("${error}", e.message));
        }
      }
    }

    // Initialize
    Zotero.AutoTagger = new AutoTagger();
    Zotero.AutoTagger.init();
    
    Zotero.debug("Auto-Tagger: Script completed");
  } catch (e) {
    Zotero.logError(e);
    Zotero.debug("Auto-Tagger: Error in index.js - " + e.message);
  }
})();
